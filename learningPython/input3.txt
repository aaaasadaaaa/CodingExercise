let A = 12
line ( 4 , 5 , 6 ,
    		7 )

tri ( ( ( 1 + 2 ) * 3 ) , 4 , 5 )   square ( ( ( 1 + 2 ) * ( 3 + 4 ) ) , 5 , 6 ) line ( 1 , 1 , 2 , 3 )

sector ( ( -.1 - .2 ) , ( 11 + ( cos -.1 ) ) , ( 1.153 * 138.4 ) , ( 14 / 15.1 ) ,  ( sin ( cos ( -.5 / .7 ) ) ) )


rect ( 
( cos  
 ( 3 + ( 5 * 6 ) ) ) 
 ,
 ( ( 3 +   -5 )
 *  -6 ) , 2 ,  2 ) rect ( 2 , 2 , 2 , 2 )
rect ( ( ( cos  -1 ) * 4 ) , 2 , 2 , 2 )


line ( ( ( ( 3 + .5 ) * 10 ) + (  sin ( sin ( cos ( sin ( ( 1 + 1 ) * ( 
	cos 3 ) )  ) ) ) ) ) , 1 ,
 1 , 1 )


translate ( scale ( rotate ( sector ( 0 , 90 , 10 , 90 , 200 ) , 360 ) , 10 ) , 3 , 4 )
translate ( scale ( rotate ( sector ( 13 , 15 , 67 , 0 , 90 ) , 90 ) , 5 ) , 3 , 4 )
translate ( scale ( rotate ( sector ( 0 , 0 , 10 , 1 , 89  ) , 360 ) , 10 ) , 3 , 4 )
scale ( rotate ( sector ( 19 , 20 , 80 , 89 , 120 ) , 29 ) , 9 )
rotate ( ngon ( 21 , 34 , 60 , 10 ) , 40 )
translate ( rotate ( ngon ( 21 , 34 , 90 , 3 ) , 27 ) , 4 , 3 )

let si = 3
let let = si
translate ( line ( 1 , 2 , ( si + 1 ) , si ) , 1 , 3 )
translate ( scale ( filledngon ( let , 40 , 39 , 199 ) , 30 ) , 1 , 3 )
translate ( translate ( translate ( scale ( scale ( line ( let , 2 , 3
 , 3 ) , 19 ) , 0.3 ) , 1  ,  1 )   ,  2   , 2 )   , 3    , 4 )

let let = 1
let let = ( 1 + let )
let let = ( 2 * let )
let line =  let 
let translate = ( 3 + let )
let rotate = ( ( 4 * translate ) + translate )
let scale = ( 1 / rotate )
let sector = 100

scale ( rotate ( rotate ( translate ( translate ( sector ( ( ( 10 * ( 2 * ( ( 4 + translate ) + .5 ) )  ) + ( 23 + scale ) )  , (  (  0.9 * translate ) + scale ) , ( 15 + line ) , line , let ) , translate , translate ) , scale , rotate ) , scale ) , scale ) , scale )
scale ( rotate ( rotate ( translate ( translate ( sector ( translate , translate , scale , scale , scale ) , scale , rotate ) , translate , translate ) , scale ) , scale ) , scale )
translate ( sector ( ( 12 + let ) , let , let , let , let ) , let , let )

line ( translate  , 2 , sector , scale )


let A = 123
let sin  = A 
line ( ( sin ( 123 * sin ) ) , 1 , 1 , A )

let sin = ( .01 - 5 )
let cos = -.1254
let sin = cos
let cos = ( .5 + sin )
tri ( 1 , 2  , 3 )
rect ( sin ,  ( cos ( sin cos )  ) ,  ( cos  sin ) , ( sin ( cos sin ) ) )


translate ( sector ( 1 , 2 ,  3  , 4 ,  5 ) , 2  , 10 )
scale ( sector ( 2  ,  3  , 4 , 5 , 6 ) , 100 )
scale ( filledsector ( 2 , 3  , 4  ,  5 , 6 ) , 1000 )
rotate ( sector ( 12 , 13  , 14  , 15 , 16 ) , 180 )
rotate ( filledsector ( 123 , 124 , 15 , 156 , 45 ) , 90 )
translate ( scale ( rotate ( filledsector ( 123 , 124 , 15 , 156 , 45 ) , 90 ) , 0.1 ) , 10 , 10 )
translate ( scale ( rotate ( filledsector ( 123 , 124 , 15 , 156 , 45 ) , 90 ) , 0.1 ) , 10 , 10 )
translate ( scale ( rotate ( filledsector ( 123 , 124 , 15 , 156 , 45 ) , 90 ) , 0.1 ) , 10 , 10 ) translate ( scale ( rotate ( filledsector ( 123 , 124 , 15 , 156 , 45 ) , 90 ) , 0.1 ) , 10 , 10 )
translate ( scale ( rotate ( filledsector ( 123 , 124 , 15 , 156 , 45 ) , 90 ) , 0.1 ) , 10 , 10 )
translate ( scale ( rotate ( filledsector ( 123 , 124 , 15 , 156 , 45 ) , 90 ) , 0.1 ) , 10 , 10 )


let a = ( 4 + 7 ) let b = 5 let c =  ( a + b ) let d = 23


linewidth ( 1000000 )
translate ( scale ( rotate ( scale ( ngon ( 3.555 , a , 7 , 4 ) , 555 ) , 560  ) , d ) , b , c )
color ( 1 , 1 , 1 )
rotate ( translate ( line ( 1 , 2 , 3 , 4 ) , 9 , 10 ) , 55 )
filledsector ( 3.444 , 5.6 , 7 , 389 , 980 )



let sin  = 10
let cos = 20
let sin =  ( ( 4 * ( cos sin ) ) + cos )
let cos =   ( ( ( 2 + ( cos ( sin ( 2 * sin ) ) ) ) * cos ) - sin )
let sin = ( 2  / sin )
line ( sin  , cos , cos  , (  sin ( cos ( sin sin ) ) ) )
tri ( ( 12 + ( sin ( cos sin ) ) ) , 1 , 2 )

let sin = ( ( sin cos ) * ( sin ( cos sin ) ) )
line ( sin , sin , sin , sin )


let sin = 1
line ( ( sin -1 ) , ( sin -1 ) , 1 , 1 )

let sin = 10
let cos = 2
let let = ( sin cos )
let rect = (  ( 50  + let ) * 20 )
rotate ( translate ( scale ( line ( ( sin cos ) , ( 8 * 6 ) , rect , sin  ) , rect )  , let , 30 ) , sin )

let sinsin = sin
line ( ( sin  sinsin ) , 2 , 3 , 4 )

tri ( sin , sin , ( 0  - sin ) )

let sin12 = 2
line ( sin12 , sin12 , sin12 , sin12 )
let _ = 3
line ( ( _  *  4 ) , _ , _ , _ )

let math_sin = 2
let sin = math_sin
let cos = ( 2 * math_sin )  
line ( ( sin sin ) , ( cos sin ) , ( sin math_sin ) , ( cos math_sin ) )

let sincos = 2 
line ( sincos , ( sin  sincos ) , ( cos ( sin sincos ) ) , 2 )

let sin = 30
let cos = ( 60 + ( sin sin ) )
let sin = cos 
penta ( sin , cos , cos )

line ( sin , sin , sin , sin )
rect ( sin , sin , sin , sin )
tri ( sin , sin , sin )
square ( sin , sin  , sin )
hexa ( sin , sin , sin )
ngon ( sin , sin , sin , cos )
sector ( sin , sin , sin , cos , ( sin cos ) )
filledrect ( sin , sin , cos  , cos )
filledtri ( sin , sin , cos )
filledsquare ( sin , sin , sin )
filledpenta ( cos , cos , ( cos sin ) )
filledhexa ( sin , sin  , sin )
filledngon ( sin  , sin  , ( cos ( sin ( cos ( cos ( cos sin ) ) ) ) ) , sin )
filledsector ( sin , sin , sin  , cos  , cos )

translate ( scale ( rotate ( rotate ( translate ( scale ( scale ( filledngon ( sin  , sin  , ( cos ( sin ( cos ( cos ( cos sin ) ) ) ) ) , sin ) , 10 ) , 0.2 ) , 2 , 2 ) , 90 ) , 45 ) , 0.5 ) , 10 , 5 )



