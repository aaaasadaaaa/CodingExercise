#include <iostream>
#include <string>
#include <cstdlib>
#include <stdio.h>
using namespace std;
int compare(string);
int shanghaitech(string,string,string);
int Gregorian(string,string,string);
int month_to_numGRE(string);
int month_to_numSTU(string,int);
int leap_year(int);
int Judge_leap_year(int);
int num_day_of_year(int);
int digit_sum(int);
int how_many_day(int,int);
int which_month(int);
int num_day_of_year(int);
int when_to_stopYEAR(int,int,int);
int when_to_stopMONTH(int,int,int,int);
string judge_month_name(int,int);
int how_many_leap_year_stu(int);
int extra_days(int);
int kind_of_yearSTU(int);
int day_of_year(int);
string name_of_month(int);
int num_leap_yearGRE(int);
int num_leap_yearGRE(int year){
	int GregorianLeapYear[] = {4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92,96,104,108,112,116,120,124,128,132,136,140,144,148,152,156,160,164,168,172,176,180,184,188,192,196,204,208,212,216,220,224,228,232,236,240,244,248,252,256,260,264,268,272,276,280,284,288,292,296,304,308,312,316,320,324,328,332,336,340,344,348,352,356,360,364,368,372,376,380,384,388,392,396,400,404,408,412,416,420,424,428,432,436,440,444,448,452,456,460,464,468,472,476,480,484,488,492,496,504,508,512,516,520,524,528,532,536,540,544,548,552,556,560,564,568,572,576,580,584,588,592,596,604,608,612,616,620,624,628,632,636,640,644,648,652,656,660,664,668,672,676,680,684,688,692,696,704,708,712,716,720,724,728,732,736,740,744,748,752,756,760,764,768,772,776,780,784,788,792,796,800,804,808,812,816,820,824,828,832,836,840,844,848,852,856,860,864,868,872,876,880,884,888,892,896,904,908,912,916,920,924,928,932,936,940,944,948,952,956,960,964,968,972,976,980,984,988,992,996,1004,1008,1012,1016,1020,1024,1028,1032,1036,1040,1044,1048,1052,1056,1060,1064,1068,1072,1076,1080,1084,1088,1092,1096,1104,1108,1112,1116,1120,1124,1128,1132,1136,1140,1144,1148,1152,1156,1160,1164,1168,1172,1176,1180,1184,1188,1192,1196,1200,1204,1208,1212,1216,1220,1224,1228,1232,1236,1240,1244,1248,1252,1256,1260,1264,1268,1272,1276,1280,1284,1288,1292,1296,1304,1308,1312,1316,1320,1324,1328,1332,1336,1340,1344,1348,1352,1356,1360,1364,1368,1372,1376,1380,1384,1388,1392,1396,1404,1408,1412,1416,1420,1424,1428,1432,1436,1440,1444,1448,1452,1456,1460,1464,1468,1472,1476,1480,1484,1488,1492,1496,1504,1508,1512,1516,1520,1524,1528,1532,1536,1540,1544,1548,1552,1556,1560,1564,1568,1572,1576,1580,1584,1588,1592,1596,1600,1604,1608,1612,1616,1620,1624,1628,1632,1636,1640,1644,1648,1652,1656,1660,1664,1668,1672,1676,1680,1684,1688,1692,1696,1704,1708,1712,1716,1720,1724,1728,1732,1736,1740,1744,1748,1752,1756,1760,1764,1768,1772,1776,1780,1784,1788,1792,1796,1804,1808,1812,1816,1820,1824,1828,1832,1836,1840,1844,1848,1852,1856,1860,1864,1868,1872,1876,1880,1884,1888,1892,1896,1904,1908,1912,1916,1920,1924,1928,1932,1936,1940,1944,1948,1952,1956,1960,1964,1968,1972,1976,1980,1984,1988,1992,1996,2000,2004,2008,2012,2016,2020,2024,2028,2032,2036,2040,2044,2048,2052,2056,2060,2064,2068,2072,2076,2080,2084,2088,2092,2096,2104,2108,2112,2116,2120,2124,2128,2132,2136,2140,2144,2148,2152,2156,2160,2164,2168,2172,2176,2180,2184,2188,2192,2196,2204,2208,2212,2216,2220,2224,2228,2232,2236,2240,2244,2248,2252,2256,2260,2264,2268,2272,2276,2280,2284,2288,2292,2296,2304,2308,2312,2316,2320,2324,2328,2332,2336,2340,2344,2348,2352,2356,2360,2364,2368,2372,2376,2380,2384,2388,2392,2396,2400,2404,2408,2412,2416,2420,2424,2428,2432,2436,2440,2444,2448,2452,2456,2460,2464,2468,2472,2476,2480,2484,2488,2492,2496,2504,2508,2512,2516,2520,2524,2528,2532,2536,2540,2544,2548,2552,2556,2560,2564,2568,2572,2576,2580,2584,2588,2592,2596,2604,2608,2612,2616,2620,2624,2628,2632,2636,2640,2644,2648,2652,2656,2660,2664,2668,2672,2676,2680,2684,2688,2692,2696,2704,2708,2712,2716,2720,2724,2728,2732,2736,2740,2744,2748,2752,2756,2760,2764,2768,2772,2776,2780,2784,2788,2792,2796,2800,2804,2808,2812,2816,2820,2824,2828,2832,2836,2840,2844,2848,2852,2856,2860,2864,2868,2872,2876,2880,2884,2888,2892,2896,2904,2908,2912,2916,2920,2924,2928,2932,2936,2940,2944,2948,2952,2956,2960,2964,2968,2972,2976,2980,2984,2988,2992,2996,3004,3008,3012,3016,3020,3024,3028,3032,3036,3040,3044,3048,3052,3056,3060,3064,3068,3072,3076,3080,3084,3088,3092,3096,3104,3108,3112,3116,3120,3124,3128,3132,3136,3140,3144,3148,3152,3156,3160,3164,3168,3172,3176,3180,3184,3188,3192,3196,3200,3204,3208,3212,3216,3220,3224,3228,3232,3236,3240,3244,3248,3252,3256,3260,3264,3268,3272,3276,3280,3284,3288,3292,3296,3304,3308,3312,3316,3320,3324,3328,3332,3336,3340,3344,3348,3352,3356,3360,3364,3368,3372,3376,3380,3384,3388,3392,3396,3404,3408,3412,3416,3420,3424,3428,3432,3436,3440,3444,3448,3452,3456,3460,3464,3468,3472,3476,3480,3484,3488,3492,3496,3504,3508,3512,3516,3520,3524,3528,3532,3536,3540,3544,3548,3552,3556,3560,3564,3568,3572,3576,3580,3584,3588,3592,3596,3600,3604,3608,3612,3616,3620,3624,3628,3632,3636,3640,3644,3648,3652,3656,3660,3664,3668,3672,3676,3680,3684,3688,3692,3696,3704,3708,3712,3716,3720,3724,3728,3732,3736,3740,3744,3748,3752,3756,3760,3764,3768,3772,3776,3780,3784,3788,3792,3796,3804,3808,3812,3816,3820,3824,3828,3832,3836,3840,3844,3848,3852,3856,3860,3864,3868,3872,3876,3880,3884,3888,3892,3896,3904,3908,3912,3916,3920,3924,3928,3932,3936,3940,3944,3948,3952,3956,3960,3964,3968,3972,3976,3980,3984,3988,3992,3996,4004,4008,4012,4016,4020,4024,4028,4032,4036,4040,4044,4048,4052,4056,4060,4064,4068,4072,4076,4080,4084,4088,4092,4096,4104,4108,4112,4116,4120,4124,4128,4132,4136,4140,4144,4148,4152,4156,4160,4164,4168,4172,4176,4180,4184,4188,4192,4196,4204,4208,4212,4216,4220,4224,4228,4232,4236,4240,4244,4248,4252,4256,4260,4264,4268,4272,4276,4280,4284,4288,4292,4296,4304,4308,4312,4316,4320,4324,4328,4332,4336,4340,4344,4348,4352,4356,4360,4364,4368,4372,4376,4380,4384,4388,4392,4396,4400,4404,4408,4412,4416,4420,4424,4428,4432,4436,4440,4444,4448,4452,4456,4460,4464,4468,4472,4476,4480,4484,4488,4492,4496,4504,4508,4512,4516,4520,4524,4528,4532,4536,4540,4544,4548,4552,4556,4560,4564,4568,4572,4576,4580,4584,4588,4592,4596,4604,4608,4612,4616,4620,4624,4628,4632,4636,4640,4644,4648,4652,4656,4660,4664,4668,4672,4676,4680,4684,4688,4692,4696,4704,4708,4712,4716,4720,4724,4728,4732,4736,4740,4744,4748,4752,4756,4760,4764,4768,4772,4776,4780,4784,4788,4792,4796,4800,4804,4808,4812,4816,4820,4824,4828,4832,4836,4840,4844,4848,4852,4856,4860,4864,4868,4872,4876,4880,4884,4888,4892,4896,4904,4908,4912,4916,4920,4924,4928,4932,4936,4940,4944,4948,4952,4956,4960,4964,4968,4972,4976,4980,4984,4988,4992,4996,5004,5008,5012,5016,5020,5024,5028,5032,5036,5040,5044,5048,5052,5056,5060,5064,5068,5072,5076,5080,5084,5088,5092,5096,5104,5108,5112,5116,5120,5124,5128,5132,5136,5140,5144,5148,5152,5156,5160,5164,5168,5172,5176,5180,5184,5188,5192,5196,5200,5204,5208,5212,5216,5220,5224,5228,5232,5236,5240,5244,5248,5252,5256,5260,5264,5268,5272,5276,5280,5284,5288,5292,5296,5304,5308,5312,5316,5320,5324,5328,5332,5336,5340,5344,5348,5352,5356,5360,5364,5368,5372,5376,5380,5384,5388,5392,5396,5404,5408,5412,5416,5420,5424,5428,5432,5436,5440,5444,5448,5452,5456,5460,5464,5468,5472,5476,5480,5484,5488,5492,5496,5504,5508,5512,5516,5520,5524,5528,5532,5536,5540,5544,5548,5552,5556,5560,5564,5568,5572,5576,5580,5584,5588,5592,5596,5600,5604,5608,5612,5616,5620,5624,5628,5632,5636,5640,5644,5648,5652,5656,5660,5664,5668,5672,5676,5680,5684,5688,5692,5696,5704,5708,5712,5716,5720,5724,5728,5732,5736,5740,5744,5748,5752,5756,5760,5764,5768,5772,5776,5780,5784,5788,5792,5796,5804,5808,5812,5816,5820,5824,5828,5832,5836,5840,5844,5848,5852,5856,5860,5864,5868,5872,5876,5880,5884,5888,5892,5896,5904,5908,5912,5916,5920,5924,5928,5932,5936,5940,5944,5948,5952,5956,5960,5964,5968,5972,5976,5980,5984,5988,5992,5996,6000,6004,6008,6012,6016,6020,6024,6028,6032,6036,6040,6044,6048,6052,6056,6060,6064,6068,6072,6076,6080,6084,6088,6092,6096,6104,6108,6112,6116,6120,6124,6128,6132,6136,6140,6144,6148,6152,6156,6160,6164,6168,6172,6176,6180,6184,6188,6192,6196,6204,6208,6212,6216,6220,6224,6228,6232,6236,6240,6244,6248,6252,6256,6260,6264,6268,6272,6276,6280,6284,6288,6292,6296,6304,6308,6312,6316,6320,6324,6328,6332,6336,6340,6344,6348,6352,6356,6360,6364,6368,6372,6376,6380,6384,6388,6392,6396,6400,6404,6408,6412,6416,6420,6424,6428,6432,6436,6440,6444,6448,6452,6456,6460,6464,6468,6472,6476,6480,6484,6488,6492,6496,6504,6508,6512,6516,6520,6524,6528,6532,6536,6540,6544,6548,6552,6556,6560,6564,6568,6572,6576,6580,6584,6588,6592,6596,6604,6608,6612,6616,6620,6624,6628,6632,6636,6640,6644,6648,6652,6656,6660,6664,6668,6672,6676,6680,6684,6688,6692,6696,6704,6708,6712,6716,6720,6724,6728,6732,6736,6740,6744,6748,6752,6756,6760,6764,6768,6772,6776,6780,6784,6788,6792,6796,6800,6804,6808,6812,6816,6820,6824,6828,6832,6836,6840,6844,6848,6852,6856,6860,6864,6868,6872,6876,6880,6884,6888,6892,6896,6904,6908,6912,6916,6920,6924,6928,6932,6936,6940,6944,6948,6952,6956,6960,6964,6968,6972,6976,6980,6984,6988,6992,6996,7004,7008,7012,7016,7020,7024,7028,7032,7036,7040,7044,7048,7052,7056,7060,7064,7068,7072,7076,7080,7084,7088,7092,7096,7104,7108,7112,7116,7120,7124,7128,7132,7136,7140,7144,7148,7152,7156,7160,7164,7168,7172,7176,7180,7184,7188,7192,7196,7200,7204,7208,7212,7216,7220,7224,7228,7232,7236,7240,7244,7248,7252,7256,7260,7264,7268,7272,7276,7280,7284,7288,7292,7296,7304,7308,7312,7316,7320,7324,7328,7332,7336,7340,7344,7348,7352,7356,7360,7364,7368,7372,7376,7380,7384,7388,7392,7396,7404,7408,7412,7416,7420,7424,7428,7432,7436,7440,7444,7448,7452,7456,7460,7464,7468,7472,7476,7480,7484,7488,7492,7496,7504,7508,7512,7516,7520,7524,7528,7532,7536,7540,7544,7548,7552,7556,7560,7564,7568,7572,7576,7580,7584,7588,7592,7596,7600,7604,7608,7612,7616,7620,7624,7628,7632,7636,7640,7644,7648,7652,7656,7660,7664,7668,7672,7676,7680,7684,7688,7692,7696,7704,7708,7712,7716,7720,7724,7728,7732,7736,7740,7744,7748,7752,7756,7760,7764,7768,7772,7776,7780,7784,7788,7792,7796,7804,7808,7812,7816,7820,7824,7828,7832,7836,7840,7844,7848,7852,7856,7860,7864,7868,7872,7876,7880,7884,7888,7892,7896,7904,7908,7912,7916,7920,7924,7928,7932,7936,7940,7944,7948,7952,7956,7960,7964,7968,7972,7976,7980,7984,7988,7992,7996,8004,8008,8012,8016,8020,8024,8028,8032,8036,8040,8044,8048,8052,8056,8060,8064,8068,8072,8076,8080,8084,8088,8092,8096,8104,8108,8112,8116,8120,8124,8128,8132,8136,8140,8144,8148,8152,8156,8160,8164,8168,8172,8176,8180,8184,8188,8192,8196,8204,8208,8212,8216,8220,8224,8228,8232,8236,8240,8244,8248,8252,8256,8260,8264,8268,8272,8276,8280,8284,8288,8292,8296,8304,8308,8312,8316,8320,8324,8328,8332,8336,8340,8344,8348,8352,8356,8360,8364,8368,8372,8376,8380,8384,8388,8392,8396,8400,8404,8408,8412,8416,8420,8424,8428,8432,8436,8440,8444,8448,8452,8456,8460,8464,8468,8472,8476,8480,8484,8488,8492,8496,8504,8508,8512,8516,8520,8524,8528,8532,8536,8540,8544,8548,8552,8556,8560,8564,8568,8572,8576,8580,8584,8588,8592,8596,8604,8608,8612,8616,8620,8624,8628,8632,8636,8640,8644,8648,8652,8656,8660,8664,8668,8672,8676,8680,8684,8688,8692,8696,8704,8708,8712,8716,8720,8724,8728,8732,8736,8740,8744,8748,8752,8756,8760,8764,8768,8772,8776,8780,8784,8788,8792,8796,8800,8804,8808,8812,8816,8820,8824,8828,8832,8836,8840,8844,8848,8852,8856,8860,8864,8868,8872,8876,8880,8884,8888,8892,8896,8904,8908,8912,8916,8920,8924,8928,8932,8936,8940,8944,8948,8952,8956,8960,8964,8968,8972,8976,8980,8984,8988,8992,8996,9004,9008,9012,9016,9020,9024,9028,9032,9036,9040,9044,9048,9052,9056,9060,9064,9068,9072,9076,9080,9084,9088,9092,9096,9104,9108,9112,9116,9120,9124,9128,9132,9136,9140,9144,9148,9152,9156,9160,9164,9168,9172,9176,9180,9184,9188,9192,9196,9200,9204,9208,9212,9216,9220,9224,9228,9232,9236,9240,9244,9248,9252,9256,9260,9264,9268,9272,9276,9280,9284,9288,9292,9296,9304,9308,9312,9316,9320,9324,9328,9332,9336,9340,9344,9348,9352,9356,9360,9364,9368,9372,9376,9380,9384,9388,9392,9396,9404,9408,9412,9416,9420,9424,9428,9432,9436,9440,9444,9448,9452,9456,9460,9464,9468,9472,9476,9480,9484,9488,9492,9496,9504,9508,9512,9516,9520,9524,9528,9532,9536,9540,9544,9548,9552,9556,9560,9564,9568,9572,9576,9580,9584,9588,9592,9596,9600,9604,9608,9612,9616,9620,9624,9628,9632,9636,9640,9644,9648,9652,9656,9660,9664,9668,9672,9676,9680,9684,9688,9692,9696,9704,9708,9712,9716,9720,9724,9728,9732,9736,9740,9744,9748,9752,9756,9760,9764,9768,9772,9776,9780,9784,9788,9792,9796,9804,9808,9812,9816,9820,9824,9828,9832,9836,9840,9844,9848,9852,9856,9860,9864,9868,9872,9876,9880,9884,9888,9892,9896,9904,9908,9912,9916,9920,9924,9928,9932,9936,9940,9944,9948,9952,9956,9960,9964,9968,9972,9976,9980,9984,9988,9992,9996};
	int i = 0;
	while (GregorianLeapYear[i] < year){
		i += 1;
	}
	return i ;
}

int main(int argc, char const *argv[]){
    using namespace std;
    int simb = compare(argv[1]);            //judge whether the form is shanghaitech or gregorian
    if (simb == 1)
        shanghaitech(argv[1],argv[2],argv[3]) ;      // change the form from geogorian to shanghaitech
    else
        Gregorian(argv[1],argv[2],argv[3]) ;        // change the form from shanghaitech to gregorian
}
int compare(string x){          //judge whether the form is shanghaitech or gregorian
    if (x == "Jan" || x == "Feb" || x == "Mar" || x == "Apr" || x == "May" || x == "Jun" || x == "Jul" || x == "Aug" || x == "Sep" || x == "Oct" || x == "Nov" || x == "Dec")
        return 1;
    else
        return 2;
}
int Gregorian(string month,string date,string year){
    using namespace std;
	int num_year = atoi(year.c_str()); // change the year from string to integer
	int num_date = atoi(date.c_str()); // change the date from string to integer
	int num_day1 = (num_year - 1) * 366 + extra_days(how_many_leap_year_stu(num_year));
	int num_month = month_to_numSTU(month, num_year);
	int num_day2 = 0;
	int form_of_day[7];
	if (kind_of_yearSTU(num_year) == 1) {
		for (int i = 0; i <= 5; i++) {
			form_of_day[i] = how_many_day(i + 1, num_year);
		}
	}
	else {
		if (kind_of_yearSTU(num_year) == 2) {
			form_of_day[0] = how_many_day(1, num_year);
			form_of_day[1] = form_of_day[0];
			for (int i = 0; i <= 6; i++) {
				form_of_day[i] = how_many_day(i, num_year);
			}
		}
		else {
			for (int i = 0; i <= 3; i++) {
				form_of_day[i] = how_many_day(i + 1, num_year);
				form_of_day[4] = form_of_day[3];
				form_of_day[5] = how_many_day(5, num_year);
				form_of_day[6] = how_many_day(6, num_year);
			}
		}
	}
	int i = 0;
	while (i < num_month - 1){
		num_day2 += form_of_day[i];
		i += 1;
	}
	int num_day = num_day1 + num_day2 + num_date - 1;
	int start_day[3] = { 1,1,1 };
	int tem_num_day = 0;
	while (num_day - tem_num_day > day_of_year(start_day[2])) {
		tem_num_day += day_of_year(start_day[2]);
		start_day[2] += 1;
	}
	int rest_day = num_day - tem_num_day;
	tem_num_day = 0;
	int day_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
	if (leap_year(start_day[2]))
		day_of_month[1] == 29;
	//cout << rest_day << endl;
	//cout << day_of_month[start_day[0] - 1]<< endl;
	//cout << << endl;
	while (rest_day - tem_num_day >= day_of_month[start_day[0] - 1]) {
		tem_num_day += day_of_month[start_day[0] - 1];
		start_day[0] += 1;
	}
	start_day[1] = rest_day - tem_num_day + 1;
	string month_name = name_of_month(start_day[0]);
	cout << month_name << " " << start_day[1] << ", " << start_day[2] << endl;


	
    return 0;
}
int how_many_leap_year_stu(int year) {
	int ShanghaiTechLeapYear[] = {};
	int i = 0;
	while (ShanghaiTechLeapYear[i] < year){
		i = i + 1;
	}
	return i;
}
int extra_days(int i) {
	int ShanghaiTechLeapYear[] = {};
	int k = 0;
	int j = 0;
	while (k <= i - 1) {
		j += how_many_day(which_month(ShanghaiTechLeapYear[k]), ShanghaiTechLeapYear[k]);
		k += 1;
	}
	return j;
}
int shanghaitech(string month, string date, string year){
    using namespace std;
    int num_year = atoi(year.c_str()); // change the year from string to integer
    int num_date = atoi(date.c_str()); // change the date from string to integer
    int num_month;
	num_month = month_to_numGRE(month);   // change the month from string to integer
    int num_leap_year = num_leap_yearGRE(num_year); // compute how many leap year before the input year 
    int num_day1 = 365 * (num_year - 1) + num_leap_year; // compute the number of days before the year
    int num_day2 = 61 * ((num_month - 1) / 2);
    if ((num_month - 1) % 2 == 1)
            num_day2 = num_day2 + 31;
    else{
		if ((num_month - 1) > 8)
			num_day2 = num_day2 + 1;
    }
    if ((num_month - 1) >= 2){
        if (leap_year(num_year))
            num_day2 = num_day2 - 1;
        else    
            num_day2 = num_day2 - 2;  
    }
    int num_day = num_day1 + num_day2 + num_date - 1;        // compute the number of days in the year
	//cout << num_day << endl;
	int start_day[3] = { 1,1,1 };
	int order = 0;
	int tem_num_day = 0;
    while (when_to_stopYEAR(num_day,tem_num_day,start_day[2])){
        tem_num_day = tem_num_day + num_day_of_year(start_day[2]);
        start_day[2] = start_day[2] + 1;
    }
    int rest_day = num_day - tem_num_day;
    tem_num_day = 0;
	int form_of_day[7];
	if (kind_of_yearSTU(start_day[2]) == 1){
		for (int i = 0; i <= 5; i++) {
			form_of_day[i] = how_many_day(i + 1, start_day[2]);
		}
	}
	else {
		if (kind_of_yearSTU(start_day[2]) == 2) {
			form_of_day[0] = how_many_day(1, start_day[2]);
			form_of_day[1] = form_of_day[0];
			for (int i = 0; i <= 6; i++) {
				form_of_day[i] = how_many_day(i, start_day[2]);
			}
		}
		else {
			for (int i = 0; i <= 3; i++) {
				form_of_day[i] = how_many_day(i + 1, start_day[2]);
			}
			form_of_day[4] = form_of_day[3];
			form_of_day[5] = how_many_day(5, start_day[2]);
			form_of_day[6] = how_many_day(6, start_day[2]);
		}
	}
    while (when_to_stopMONTH(rest_day,tem_num_day,start_day[0],start_day[2])){
		tem_num_day += form_of_day[start_day[0] - 1];
		start_day[0] += 1;
    }
    start_day[1] = rest_day - tem_num_day + 1;
	string month_name = judge_month_name(start_day[0],start_day[2]);
	cout << month_name << ' ' ;
	printf("%x",start_day[1]);
	cout <<',' << ' ' << start_day[2] << endl;
	return 0;
}
string judge_month_name(int month, int year){
    string s;
    if (Judge_leap_year(year)){
        if (which_month(year) == 1){
			switch (month) {
				case 1: s = "Sist";
					break;
				case 2: s = "SIST";
					break;
				case 3: s = "Spst";
					break;
				case 4: s = "Slst";
					break;
				case 5: s = "Sem";
					break;
				case 6: s = "Siais";
					break;
				case 7: s = "Ihuman";
					break;
			}
            
        }
        else{
			switch (month) {
				case 1: s = "Sist";
					break;
				case 2: s = "Spst";
					break;
				case 3: s = "Slst";
					break;
				case 4: s = "Sem";
					break;
				case 5: s = "SEM";
					break;
				case 6: s = "Siais";
					break;
				case 7: s = "Ihuman";
					break;
			}
            
        }
    }
    else{
        switch (month){
            case 1 : s = "Sist";
                     break;
            case 2 : s = "Spst";
                     break;
            case 3 : s = "Slst";
                     break;
            case 4 : s = "Sem";
                     break;
            case 5 : s = "Siais";
                     break;
            case 6 : s = "Ihuman";
                     break;
        }
        return s;
    }
}
int when_to_stopYEAR(int d1,int d2,int year){
    if (d1 - d2 > num_day_of_year(year))
        return 1;
    else 
        return 0;
}
int when_to_stopMONTH(int d1,int d2,int month,int year){
    if (d1 - d2 > how_many_day(month,year))
        return 1;
    else    
        return 0;

}
int leap_year(int x){
    if ((x % 4 == 0 && x % 100 != 0) || (x % 400 == 0 && x % 4000 != 0))   // whether the year is leap year or not
        return 1;
    else
        return 0;
}
int month_to_numGRE(string x) {
	string mon[12] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
	int i = 0;
	while (x != mon[i]) {
		i = i + 1;
    }
	return i + 1;
}
int month_to_numSTU(string x, int y) {
	int i = 0;
	if (Judge_leap_year(y)) {
		if (which_month(y) == 1) {
			string mon1[7] = { "Sist","SIST", "Spst", "Slst", "Sem", "Siais", "Ihuman" };
			while (mon1[i] != x)
				i = i + 1;

		}
		else {
			string mon1[7] = { "Sist", "Spst", "Slst", "Sem","SEM" ,"Siais", "Ihuman" };
			while (mon1[i] != x)
				i = i + 1;

		}
	}
	else {
		string mon1[6] = { "Sist", "Spst", "Slst", "Sem", "Siais", "Ihuman" };
		while (mon1[i] != x)
			i = i + 1;

	}
	return i + 1;
}
int Judge_leap_year(int year){
    int k = (year + digit_sum(year)) % 13;
    if (k == 0)
        return 1;
    else
        return 0;
}
int digit_sum(int year){
    int rest = year;
    int last = 0;
    int sum = 0;
    while (rest != 0){
        last = rest % 10;
        sum = sum + last;
        rest = (rest - last) / 10;
    }
    return sum;
}
int num_day_of_year(int n){
    if (Judge_leap_year(n)){
        int x = 366 + how_many_day(which_month(n),n);
        return x;
    }
    else
        return 366;
}
int which_month(int year){
    int m = (year - digit_sum(year)) % 6 + 1;
    return m;
}
int how_many_day(int month,int year){
    int d = 60 + (10 * year - month) % 3;
    return d;
}
int kind_of_yearSTU(int n) {
	if (Judge_leap_year(n))
		return 1;
	else {
		if (which_month(n) == 1)
			return 2;
		else
			return 3;
	}
}
int day_of_year(int year) {
	if (leap_year(year))
		return 366;
	else
		return 365;
}
string name_of_month(int month) {
	string mon[12] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
	return mon[month - 1];
}